Import module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Case list of same size lists, div is int:
       >>> m = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]
       >>> matrix_divided(m, 5)
       [[2.0, 4.0, 6.0], [8.0, 10.0, 12.0], [14.0, 16.0, 18.0]]

Case list of same size lists, div is float:
     >>> m = [[10, 20, 30]]
       >>> matrix_divided(m, 5.5)
       [[1.82, 3.64, 5.45]]

Case list of same size lists, div is negative int:
     >>> m = [[10, -20, 30]]
       >>> matrix_divided(m, -5.5)
       [[-1.82, 3.64, -5.45]]

Case list of not same size lists, div is int:
     >>> m = [[10, -20, 30], [40, 50, 60, 70]]
	>>> matrix_divided(m, 5)
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size

Case list of same size lists, one of the rows content not int or float:
     >>> m = [[10, -20, "30"]]
       >>> matrix_divided(m, 5)
       Traceback (most recent call last):
       ...
       TypeError: matrix must be a matrix (list of lists) of integers/floats

Case div is 0:
     >>> m = [[10, -20, 30]]
       >>> matrix_divided(m, 0)
       Traceback (most recent call last):
       ...
       ZeroDivisionError: division by zero

Case div is not int or float:
     >>> m = [[10, -20, 30]]
       >>> matrix_divided(m, "5")
       Traceback (most recent call last):
       ...
       TypeError: div must be a number

Case list is not list:
     >>> m = None
     >>> matrix_divided(m, 5)
     Traceback (most recent call last):
     TypeError: matrix must be a matrix (list of lists) of integers/floats

Case list is empty list:
     >>> m = []
     >>> matrix_divided(m, 5)
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats
